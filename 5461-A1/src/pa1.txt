Thomas Roy - 40209149
Programming Assignment 1 - Due July 23, 2023

# Task 1
The account balance can be accessed by the Depositor and the Withdrawer at the same time, so there is a race condition on the balance variable. The withdraw and deposit methods should wait for the other one to finish before accessing balance and modifying it.


# Task 2
The threads are marked as ready when the start() method is called (so in the following order: deposit[0], withdraw[0], deposit[1], withdraw[1], etc), but it is the thread scheduler that will decide what thread executes when.

A thread is created with start(), runs when the thread scheduler decides and then terminates when all its code is executed, which resumes anywhere waiting with join(). 

Playing with the start order does not change anything when the threads working on the same data are synchronized.


# Task 5
Synchronized blocks allow the thread scheduler to execute more operations in parallel. For example, block synchronization allow to execute the time-wasting calculations in parallel, rather than concurrently. Using method synchronization, these calculations add a lot of overhead, because the thread scheduler makes each withdraw thread wait for the deposit thread, and vice-versa. Sections such as this one do not need to be synchronized because they do not touch common/critical data:
/*
double k = 999999999;
		for(int i=0;i<100;i++)
			k = k / 2;
*/
